// oauth2-auth.js.example - Template de configuraci√≥n OAuth2 para K6
// Copia este archivo como oauth2-auth.js y completa con tus credenciales reales

export const AUTH0_CONFIG = {
    domain: 'YOUR_AUTH0_DOMAIN.auth0.com',           // ej: dev-abc123.us.auth0.com
    clientId: 'YOUR_CLIENT_ID',                      // Client ID de tu Auth0 Application
    clientSecret: 'YOUR_CLIENT_SECRET',              // Client Secret de tu Auth0 Application
    audience: 'https://api.microservices.local',    // Audience configurado en Auth0
    gatewayUrl: 'http://localhost:9090'              // URL del Cloud Gateway
};

// Cache para token OAuth2
let tokenCache = null;
let tokenExpiry = null;

/**
 * Obtiene un token OAuth2 v√°lido desde el gateway
 * Implementa caching para evitar solicitudes innecesarias
 */
export function getGatewayToken() {
    // Verificar si el token en cache sigue v√°lido (con 30s de buffer)
    if (tokenCache && tokenExpiry && (Date.now() < tokenExpiry - 30000)) {
        console.log('‚úÖ Usando token desde cache');
        return tokenCache;
    }

    console.log('üîÑ Solicitando nuevo token OAuth2...');
    
    const tokenUrl = `${AUTH0_CONFIG.gatewayUrl}/api/stress-test/token`;
    const payload = {
        domain: AUTH0_CONFIG.domain,
        clientId: AUTH0_CONFIG.clientId,
        clientSecret: AUTH0_CONFIG.clientSecret,
        audience: AUTH0_CONFIG.audience
    };

    const params = {
        headers: {
            'Content-Type': 'application/json',
        },
        timeout: '30s'
    };

    try {
        const response = http.post(tokenUrl, JSON.stringify(payload), params);
        
        if (response.status !== 200) {
            console.error(`‚ùå Error obteniendo token: ${response.status} - ${response.body}`);
            return null;
        }

        const tokenData = JSON.parse(response.body);
        
        if (!tokenData.access_token) {
            console.error('‚ùå Respuesta no contiene access_token');
            return null;
        }

        // Actualizar cache
        tokenCache = tokenData.access_token;
        tokenExpiry = Date.now() + (tokenData.expires_in * 1000);
        
        console.log(`‚úÖ Token OAuth2 obtenido exitosamente (expira en ${tokenData.expires_in}s)`);
        return tokenCache;
        
    } catch (error) {
        console.error(`‚ùå Error en solicitud de token: ${error.message}`);
        return null;
    }
}

/**
 * Obtiene headers de autenticaci√≥n con Bearer token
 */
export function getAuthHeaders() {
    const token = getGatewayToken();
    if (!token) {
        console.error('‚ùå No se pudo obtener token de autenticaci√≥n');
        return {};
    }
    
    return {
        'Authorization': `Bearer ${token}`,
        'Content-Type': 'application/json'
    };
}

/**
 * Limpia el cache de token (√∫til para testing)
 */
export function clearTokenCache() {
    tokenCache = null;
    tokenExpiry = null;
    console.log('üßπ Cache de token limpiado');
}

// Importar http para las solicitudes
import http from 'k6/http';
